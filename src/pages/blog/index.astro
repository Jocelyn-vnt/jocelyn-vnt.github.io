---
import BaseHead from '../../components/BaseHead.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import MeshGradientBackground from '../../components/MeshGradientBackground.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../../consts';
import { getCollection } from 'astro:content';
import FormattedDate from '../../components/FormattedDate.astro';
import Doctype from '../../components/Doctype.astro';

const posts = (await getCollection('blog')).sort(
    (a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf(),
);

// Fonction pour déterminer la catégorie d'un post
function getPostCategory(post) {
    const title = post.data.title.toLowerCase();
    const description = post.data.description.toLowerCase();
    
    if (title.includes('dragon ball') || title.includes('3d') || description.includes('3d')) {
        return '3d';
    } else if (title.includes('motion') || description.includes('motion') || title.includes('animation') || title.includes('video')) {
        return 'motion-design';
    } else if (title.includes('web') || title.includes('site') || title.includes('stratégie') || description.includes('web')) {
        return 'web-design';
    } else {
        return 'graphic-design';
    }
}

// Fonction pour générer des tailles variées pour la grille
// Limitation : max 3 colonnes (moitié de 6) et max 2 rangées
function getGridSize(index, title) {
    const sizes = [
        'col-span-3 row-span-2', // Large (moitié max)
        'col-span-2 row-span-2', // Carré moyen
        'col-span-3 row-span-1', // Rectangle horizontal
        'col-span-2 row-span-1', // Rectangle horizontal moyen
        'col-span-1 row-span-2', // Rectangle vertical
        'col-span-1 row-span-1', // Petit carré
        'col-span-2 row-span-2', // Carré moyen (répété pour équilibrer)
        'col-span-3 row-span-1', // Rectangle horizontal (répété)
        'col-span-1 row-span-2', // Rectangle vertical (répété)
        'col-span-1 row-span-1', // Petit carré (répété)
    ];
    
    const seed = (index * 7 + title.charCodeAt(0) * 3) % sizes.length;
    return sizes[seed];
}
---

<Doctype/>

<MeshGradientBackground />

<main class="flex-grow flex justify-center">
    <div class="w-full">
        <!-- Header -->
        <div class="fixed flex w-full justify-center items-center pt-5 z-50">
            <Header />
        </div>

        <!-- Title Section -->
        <div class="relative flex flex-col items-center pt-32 pb-12">
            <h1 class="text-[248px] font-bold font-anuphan text-white relative" id="portfolio-text">
                Projets
                <span class="absolute text-purple-800 font-alex text-[144px] font-normal bottom-0 right-0" id="design-text">Design</span>
            </h1>
        </div>

        <!-- Filter Section -->
        <section class="flex justify-center px-6 pb-8 relative z-10">
            <div class="flex gap-4 justify-center flex-wrap">
                <button 
                    class="filter-btn active px-6 py-3 bg-white/10 backdrop-blur-lg border border-glass rounded-full text-white font-anuphan font-medium hover:bg-white/20 hover:border-purple-400/50 transition-all duration-300 shadow-glass"
                    data-filter="all"
                >
                    Tout
                </button>
                <button 
                    class="filter-btn px-6 py-3 bg-white/10 backdrop-blur-lg border border-glass rounded-full text-white font-anuphan font-medium hover:bg-white/20 hover:border-purple-400/50 transition-all duration-300 shadow-glass"
                    data-filter="motion-design"
                >
                    Motion Design
                </button>
                <button 
                    class="filter-btn px-6 py-3 bg-white/10 backdrop-blur-lg border border-glass rounded-full text-white font-anuphan font-medium hover:bg-white/20 hover:border-purple-400/50 transition-all duration-300 shadow-glass"
                    data-filter="graphic-design"
                >
                    Graphic Design
                </button>
                <button 
                    class="filter-btn px-6 py-3 bg-white/10 backdrop-blur-lg border border-glass rounded-full text-white font-anuphan font-medium hover:bg-white/20 hover:border-purple-400/50 transition-all duration-300 shadow-glass"
                    data-filter="web-design"
                >
                    Web Design
                </button>
                <button 
                    class="filter-btn px-6 py-3 bg-white/10 backdrop-blur-lg border border-glass rounded-full text-white font-anuphan font-medium hover:bg-white/20 hover:border-purple-400/50 transition-all duration-300 shadow-glass"
                    data-filter="3d"
                >
                    3D
                </button>
            </div>
        </section>

        <!-- Projects Grid Section -->
        <section class="flex justify-center px-6 py-8 relative z-10">
            <div class="w-full max-w-7xl">
                <!-- Message quand aucun projet trouvé -->
                <div id="no-projects" class="hidden text-center py-20">
                    <div class="bg-white/10 backdrop-blur-lg border border-glass rounded-2xl p-8 shadow-glass max-w-md mx-auto">
                        <h3 class="text-white font-anuphan font-bold text-xl mb-4">Aucun projet trouvé</h3>
                        <p class="text-white/70">Aucun projet ne correspond à cette catégorie pour le moment.</p>
                    </div>
                </div>

                <!-- Grille Bento Box 6 colonnes -->
                <div id="projects-grid" class="grid grid-cols-6 gap-4 auto-rows-auto">
                    {posts.map((post, index) => {
                        const category = getPostCategory(post);
                        const sizeClass = getGridSize(index, post.data.title);
                        
                        return (
                            <div 
                                class={`project-card ${sizeClass} relative group overflow-hidden rounded-2xl transition-all duration-500 ease-in-out`} 
                                data-category={category}
                            >
                                <a href={`/blog/${post.slug}/`} class="block h-full">
                                    <div class="relative w-full h-full min-h-[180px] overflow-hidden rounded-2xl">
                                        <img 
                                            src={post.data.heroImage} 
                                            alt={post.data.title}
                                            class="w-full h-full object-cover transition-transform duration-500 group-hover:scale-110"
                                        />
                                        
                                        <!-- Overlay graduel -->
                                        <div class="absolute inset-0 bg-gradient-to-t from-black/80 via-black/20 to-transparent opacity-60 group-hover:opacity-80 transition-opacity duration-300"></div>
                                        
                                        <!-- Contenu de la carte -->
                                        <div class="absolute inset-0 p-6 flex flex-col justify-end">
                                            <div class="transform translate-y-4 group-hover:translate-y-0 transition-transform duration-300">
                                                <h3 class="text-white font-anuphan font-bold text-lg mb-2 line-clamp-2">
                                                    {post.data.title}
                                                </h3>
                                                <p class="text-white/80 text-sm mb-3 line-clamp-2">
                                                    {post.data.description}
                                                </p>
                                                <div class="flex items-center justify-between">
                                                    <span class="text-white/70 text-xs font-medium">
                                                        <FormattedDate date={post.data.pubDate} />
                                                    </span>
                                                    <span class="text-purple-300 text-sm font-medium opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                                                        Voir le projet →
                                                    </span>
                                                </div>
                                            </div>
                                        </div>
                                        
                                        <!-- Badge catégorie -->
                                        <div class="absolute top-4 left-4 opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                                            <span class="px-3 py-1 bg-white/20 backdrop-blur-md rounded-full text-white text-xs font-medium border border-white/30">
                                                {category === 'motion-design' ? 'Motion Design' : 
                                                 category === 'graphic-design' ? 'Graphic Design' : 
                                                 category === '3d' ? '3D' :
                                                 'Web Design'}
                                            </span>
                                        </div>
                                    </div>
                                </a>
                            </div>
                        );
                    })}
                </div>
            </div>
        </section>
    </div>
</main>

<style>
    /* Transitions pour les cartes */
    .project-card {
        transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    }
    
    /* États de filtrage */
    .project-card.filtering-out {
        opacity: 0;
        transform: scale(0.8) translateY(20px);
        pointer-events: none;
    }
    
    .project-card.filtering-in {
        opacity: 1;
        transform: scale(1) translateY(0);
        pointer-events: auto;
    }
    
    .project-card.hidden {
        display: none;
    }
    
    /* Style pour les boutons de filtre actifs */
    .filter-btn.active {
        background: rgba(168, 85, 247, 0.3);
        border-color: rgba(168, 85, 247, 0.5);
        color: #e879f9;
        box-shadow: 0 0 20px rgba(168, 85, 247, 0.3);
        transform: translateY(-2px);
    }
    
    .filter-btn {
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }
    
    .filter-btn:hover {
        transform: translateY(-1px);
    }
    
    /* Animation de la grille lors du filtrage */
    #projects-grid {
        transition: height 0.4s ease;
    }
    
    /* Responsive amélioré - tailles limitées */
    @media (max-width: 1200px) {
        #projects-grid {
            grid-template-columns: repeat(5, 1fr);
        }
        .col-span-3 { grid-column: span 3; } /* Max 3/5 = 60% */
        .col-span-2 { grid-column: span 2; }
        .col-span-1 { grid-column: span 1; }
        .row-span-2 { grid-row: span 2; }
        .row-span-1 { grid-row: span 1; }
    }
    
    @media (max-width: 1024px) {
        #projects-grid {
            grid-template-columns: repeat(4, 1fr);
        }
        .col-span-3 { grid-column: span 2; } /* Limité à 50% max */
        .col-span-2 { grid-column: span 2; }
        .col-span-1 { grid-column: span 1; }
        .row-span-2 { grid-row: span 2; }
        .row-span-1 { grid-row: span 1; }
    }
    
    @media (max-width: 768px) {
        #projects-grid {
            grid-template-columns: repeat(3, 1fr);
        }
        .col-span-3, .col-span-2 { grid-column: span 2; } /* Max 2/3 = 66% */
        .col-span-1 { grid-column: span 1; }
        .row-span-2 { grid-row: span 1; } /* Réduire hauteur sur mobile */
        .row-span-1 { grid-row: span 1; }
    }
    
    @media (max-width: 580px) {
        #projects-grid {
            grid-template-columns: repeat(2, 1fr);
        }
        .col-span-3, .col-span-2 { grid-column: span 1; } /* Une colonne max sur très petit écran */
        .col-span-1 { grid-column: span 1; }
        .row-span-2, .row-span-1 { 
            grid-row: span 1; 
        }
    }
    
    /* Effet de ligne de texte clampé */
    .line-clamp-2 {
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }
    
    /* Animation d'entrée en cascade */
    .project-card.cascade-enter {
        animation: cascadeIn 0.6s ease-out forwards;
    }
    
    @keyframes cascadeIn {
        from {
            opacity: 0;
            transform: translateY(30px) scale(0.9);
        }
        to {
            opacity: 1;
            transform: translateY(0) scale(1);
        }
    }
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const filterButtons = document.querySelectorAll('.filter-btn');
    const projectCards = document.querySelectorAll('.project-card');
    const projectsGrid = document.getElementById('projects-grid');
    const noProjectsMessage = document.getElementById('no-projects');
    
    let currentFilter = 'all';
    
    // Fonction pour filtrer les projets
    function filterProjects(category) {
        let visibleCount = 0;
        
        // Phase 1: Masquer les cartes qui ne correspondent pas
        projectCards.forEach((card, index) => {
            const cardCategory = card.getAttribute('data-category');
            const shouldShow = category === 'all' || cardCategory === category;
            
            if (shouldShow) {
                visibleCount++;
                // Retarder l'affichage pour créer un effet en cascade
                setTimeout(() => {
                    card.classList.remove('filtering-out', 'hidden');
                    card.classList.add('filtering-in', 'cascade-enter');
                }, index * 50);
            } else {
                card.classList.remove('filtering-in', 'cascade-enter');
                card.classList.add('filtering-out');
                // Masquer complètement après l'animation
                setTimeout(() => {
                    card.classList.add('hidden');
                }, 400);
            }
        });
        
        // Afficher/masquer le message "aucun projet"
        setTimeout(() => {
            if (visibleCount === 0) {
                noProjectsMessage.classList.remove('hidden');
                projectsGrid.style.display = 'none';
            } else {
                noProjectsMessage.classList.add('hidden');
                projectsGrid.style.display = 'grid';
            }
        }, 200);
    }
    
    // Fonction pour mettre à jour l'état actif des boutons
    function updateActiveButton(activeButton) {
        filterButtons.forEach(btn => {
            btn.classList.remove('active');
        });
        activeButton.classList.add('active');
    }
    
    // Ajouter les événements de clic aux boutons de filtre
    filterButtons.forEach(button => {
        button.addEventListener('click', function() {
            const filter = this.getAttribute('data-filter');
            
            // Ne rien faire si c'est déjà le filtre actuel
            if (filter === currentFilter) return;
            
            currentFilter = filter;
            updateActiveButton(this);
            filterProjects(filter);
            
            // Effet visuel sur le bouton cliqué
            this.style.transform = 'scale(0.95)';
            setTimeout(() => {
                this.style.transform = '';
            }, 150);
        });
    });
    
    // Animation d'entrée initiale
    projectCards.forEach((card, index) => {
        setTimeout(() => {
            card.classList.add('cascade-enter');
        }, index * 100);
    });
    
    // Effet de parallaxe sur le titre
    const portfolioText = document.getElementById("portfolio-text");
    const designText = document.getElementById("design-text");
    const container = document.querySelector("main");

    if (container && portfolioText && designText) {
        container.addEventListener("mousemove", (e) => {
            const rect = container.getBoundingClientRect();
            const x = (e.clientX - rect.left) / rect.width - 0.5;
            const y = (e.clientY - rect.top) / rect.height - 0.5;

            portfolioText.style.transform = `translate(${x * 15}px, ${y * 15}px)`;
            designText.style.transform = `translate(${x * 10}px, ${y * 10}px)`;
        });
    }
});
</script>

<svg width="0" height="0">
    <filter id="gooey">
        <feGaussianBlur in="SourceGraphic" stdDeviation="10" result="blur" />
        <feColorMatrix in="blur" mode="matrix" values="
            1 0 0 0 0
            0 1 0 1 0
            0 0 1 0 0
            1 0 0 20 -10" result="gooey" />
        <feComposite in="SourceGraphic" in2="gooey" operator="atop" />
    </filter>
</svg>

</body>
</html>